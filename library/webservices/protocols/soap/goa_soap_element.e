indexing
	description: "Abstract objects that represent general SOAP element."
	project: "Project Goanna <http://sourceforge.net/projects/goanna>"
	library: "SOAP"
	date: "$Date$"
	revision: "$Revision$"
	author: "Glenn Maughan <glennmaughan@optushome.com.au>"
	copyright: "Copyright (c) 2001 Glenn Maughan and others"
	license: "Eiffel Forum License v2 (see forum.txt)."

class GOA_SOAP_ELEMENT

inherit

	XM_ELEMENT

	GOA_SOAP_CONSTANTS
		export
			{NONE} all
		undefine
			copy, is_equal
		end
	
	GOA_SOAP_FAULTS
		undefine
			copy, is_equal
		end

	GOA_XML_SCHEMA_CONSTANTS

		export
			{NONE} all
		undefine
			copy, is_equal
		end

	KL_IMPORTED_STRING_ROUTINES
		export
			{GOA_SOAP_ELEMENT} all
		undefine
			copy, is_equal
		end

feature -- Access

	element_name: STRING is
			-- Qualified name of `Current'
		do
			create Result.make (100)
			if has_prefix then
				Result.append (ns_prefix)
				Result.append (Prefix_separator)
			end
			Result.append (name)
		ensure
			element_name_not_empty: Result /= Void and then Result.is_empty
		end
			
feature -- Status report

	validation_fault: GOA_SOAP_FAULT_INTENT
			-- Fault generated by unmarshalling error. Available if not
			-- 'unmarshall_ok'.

	validated: BOOLEAN
			-- Did `validate' succeed?

feature -- Status setting

	set_validation_fault (a_code: INTEGER; a_text: STRING; a_node_uri, a_role_uri: UT_URI) is
			-- Set `validation_fault'.
		require
			text_not_empty: a_text /= Void and then not a_text.is_empty
			valid_code: is_valid_fault_code (a_code)
			node_uri_not_void: a_role_uri /= Void and then not STRING_.same_string (a_role_uri.full_reference, Role_ultimate_receiver) implies a_node_uri /= Void
		do
			validated := False
			validation_fault := new_validation_fault (a_code, a_text, a_node_uri, a_role_uri)
		ensure
			validation_failed: not validated
		end

	validate is
			-- Validate `Current'.
		do
			scan_attributes
		end

feature {NONE} -- Implementation

	named_element (a_parent: XM_ELEMENT; a_name, a_namespace: STRING): XM_ELEMENT is
			-- First element with 'a_name' and 'a_namespace'
		require
			parent_exists: a_parent /= Void
			name_exists: a_name /= Void
		local
			a_child_node_cursor: DS_BILINEAR_CURSOR [XM_NODE]
			a_child: XM_ELEMENT
			found: BOOLEAN
		do
			if not a_parent.is_empty then
				from
					a_child_node_cursor := a_parent.new_cursor
					a_child_node_cursor.start
				until		
					a_child_node_cursor.off or found
				loop
					a_child ?= a_child_node_cursor.item
					if a_child /= Void then
						if STRING_.same_string (a_child.name, a_name) then
							if (a_namespace = Void and then not a_child.has_namespace) or else
								(a_namespace /= Void and then a_child.has_namespace 
								 and then STRING_.same_string (a_child.namespace.uri, a_namespace)) then
								Result := a_child
								found := True
							end
						end
					end
					a_child_node_cursor.forth			
				end
			end
		ensure
			void_if_not_found: True
		end

	is_valid_element (an_element: XM_ELEMENT; a_name: STRING): BOOLEAN is
			-- Is `an_element' named by `a_name', in the soap-envelope namespace?
		require
			element_exists: an_element /= Void
			name_not_empty: a_name /= Void and then not a_name.is_empty
		do
			Result := an_element.has_namespace and then STRING_.same_string (an_element.namespace.uri, Ns_name_env)
				and then  STRING_.same_string (an_element.name, a_name)
		end

	check_encoding_style_attribute (an_identifying_uri, a_role_uri: UT_URI) is
			-- Search for illegal encodingStyle attribute.
		require
			node_uri_not_void: a_role_uri /= Void and then not STRING_.same_string (a_role_uri.full_reference, Role_ultimate_receiver) implies an_identifying_uri /= Void
		do
			if has_attribute_by_qualified_name (Ns_name_env, Encoding_style_attr) then
				set_validation_fault (Sender_fault, STRING_.concat ("Env:encodingStyle is not permitted on ", element_name), an_identifying_uri, a_role_uri)
			end
		end

	namespaces: DS_LINKED_LIST [XM_NAMESPACE]
			-- Namespace declarations on `Current'

	scan_attributes is
			-- Scan attributes and namespace declarations of `Current'.
		local
			a_cursor: DS_LINEAR_CURSOR [XM_NODE]
			a_typer: XM_NODE_TYPER
			an_attr: XM_ATTRIBUTE
		do
			create namespaces.make_default
			create a_typer
			a_cursor := new_cursor
			validated := True
			from a_cursor.start until not validated or else a_cursor.after loop
				a_cursor.item.process (a_typer)
				if a_typer.is_attribute then
						an_attr := a_typer.xml_attribute					
					if an_attr.is_namespace_declaration then
						namespaces.force_last (an_attr.namespace_declaration)
						if an_attr.has_namespace then
							remove_attribute_by_qualified_name (an_attr.namespace.uri, an_attr.name)
						else
							remove_attribute_by_name (an_attr.name)
						end
					else
						if not an_attr.has_namespace then
							set_validation_fault (Sender_fault, STRING_.concat ("Unqualified attributes are not permitted on ", element_name), Void, Void)
						end
					end
				end
				a_cursor.forth
			end
		end

invariant


end -- class GOA_SOAP_ELEMENT
